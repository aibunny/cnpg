apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: smartcollect-db
  namespace: smartcollect-db
spec:
  description: "SmartCollect Database"
  imageName: ghcr.io/cloudnative-pg/postgresql:16.3
  instances: 3
  imagePullPolicy: Always
  minSyncReplicas: 1
  maxSyncReplicas: 2
  startDelay: 300
  stopDelay: 300

  primaryUpdateStrategy: unsupervised

  storage:
    storageClass: longhorn-postgres-replica-storage
    size: 2Gi
  walStorage:
    storageClass: longhorn-postgres-replica-storage
    size: 2Gi

  #prometheus
  monitoring:
    enablePodMonitor: true

  postgresql:
    parameters:
      shared_buffers: 256MB
      pg_stat_statements.max: "10000"
      pg_stat_statements.track: all
      auto_explain.log_min_duration: "10s"
    pg_hba:
      - host all all 10.244.0.0/16 md5

  bootstrap:
    initdb:
      database: smartcollect
      owner: smartcollect
      secret:
        name: smartcollect-db-user
      # postInitSQL:
      #   - CREATE DATABASE keycloak;
      #   - CREATE DATABASE superset;
      #   - CREATE DATABASE smartcollect-logs;

  # superuserSecret:
  #   name: smartcollect-db-superuser

  # backup:
  #   barmanObjectStore:
  #     destinationPath: s3://cluster-cnpg-backup/
  #     endpointURL: http://microk8s-hl:9000
  #     s3Credentials:
  #       accessKeyId:
  #         name: minio-backup-creds
  #         key: ACCESS_KEY_ID
  #       secretAccessKey:
  #         name: minio-backup-creds
  #         key: ACCESS_SECRET_KEY
  #     wal:
  #       compression: gzip
  #       encryption: AES256
  #     data:
  #       compression: gzip
  #       encryption: AES256
  #       immediateCheckpoint: false
  #       jobs: 2
  #   retentionPolicy: "30d"

  # resources:
  #   requests:
  #     memory: "512Mi"
  #     cpu: "1"
  #   limits:
  #     memory: "1Gi"
  #     cpu: "2"

---
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: longhorn-postgres-replica-storage
  annotations:
    storageclass.kubernetes.io/is-default-class: "false"
provisioner: driver.longhorn.io
allowVolumeExpansion: true
# WaitForFirstConsumer mode will delay the binding and provisioning of a PersistentVolume until a Pod using the PersistentVolumeClaim is created.
volumeBindingMode: WaitForFirstConsumer
reclaimPolicy: Delete
parameters:
  numberOfReplicas: "1"
  staleReplicaTimeout: "1440" # 1 day
  fsType: "ext4"
  diskSelector: "nvme"
  dataLocality: "strict-local"
  recurringJobSelector: '[
    {
    "name":"postgres-replica-storage",
    "isGroup":true
    }
    ]'

---
apiVersion: v1
kind: Secret
metadata:
  name: smartcollect-db-user
  namespace: smartcollect-db
type: kubernetes.io/basic-auth
data:
  username: "c21hcnRjb2xsZWN0"
  password: "cG9zdGdyZXM="

---
apiVersion: v1
kind: Secret
metadata:
  name: smartcollect-db-superuser
  namespace: smartcollect-db

---
apiVersion: v1
kind: Secret
metadata:
  name: minio-backup-creds
  namespace: smartcollect-db
type: Opaque
data:
  ACCESS_KEY_ID: "bWluaW8="
  ACCESS_SECRET_KEY: "bWluaW8="

---
apiVersion: v1
kind: Service
metadata:
  name: smartcollect-db-service
  namespace: smartcollect-db
spec:
  selector:
    cnpg.io/cluster: smartcollect-db
  ports:
    - name: postgresql
      port: 5432
      targetPort: 5432
  type: ClusterIP
